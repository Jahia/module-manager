<?xml version="1.0" encoding="UTF-8"?>
<flow xmlns="http://www.springframework.org/schema/webflow"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.springframework.org/schema/webflow
                          http://www.springframework.org/schema/webflow/spring-webflow-2.0.xsd">

    <var name="flowHandler" class="org.jahia.modules.modulemanager.flow.ModuleManagementFlowHandler"/>

    <on-start>
        <evaluate expression="flowHandler.initModules(flowRequestContext, externalContext.requestMap.renderContext)" />
    </on-start>

    <decision-state id="moreAnswersNeeded">
        <if test="flowHandler.isInModule(externalContext.requestMap.renderContext)" then="detailedView" else="viewResolver" />
    </decision-state>

    <decision-state id="viewResolver">
        <if test="flowHandler.isStudio(externalContext.requestMap.renderContext)" then="studioView" else="view" />
    </decision-state>

    <view-state id="view" model="moduleFile">
        <on-entry>
            <evaluate expression="flowHandler.initModuleFile()" result="flowScope.moduleFile"/>
        </on-entry>

        <on-render>
            <evaluate expression="flowHandler.allModuleVersions" result="requestScope.allModuleVersions"/>
            <evaluate expression="flowHandler.availableUpdates" result="requestScope.availableUpdates"/>
            <evaluate expression="JahiaTemplateManagerService.templatePackageRegistry.registeredModules" result="requestScope.registeredModules"/>
            <evaluate expression="JahiaTemplateManagerService.sourceControlFactory.supportedSourceControls" result="requestScope.sourceControls"/>
            <evaluate expression="flowHandler.populateSitesInformation(flowRequestContext)" />
            <evaluate expression="flowHandler.getLastModulesUpdateTime()" result="requestScope.lastModulesUpdate"/>
        </on-render>

        <transition on="downloadSources" to="downloadSources">
            <evaluate expression="flowHandler.validateScmInfo(requestParameters.scmUri, requestParameters.branchOrTag, requestParameters.version, flowScope)"/>
        </transition>
        <transition on="viewDownloadForm" to="viewDownloadForm"/>
        <transition on="duplicateModuleForm" to="duplicateModuleForm"/>
        <transition on="downloadTempSources" to="downloadTempSources"/>
        <transition on="startModule" to="startModule"/>
        <transition on="stopModule" to="stopModule"/>
        <transition on="undeployModule" to="undeployModule"/>
        <transition on="updateModule" to="updateModule"/>
        <transition on="upload" to="view">
            <evaluate expression="flowHandler.uploadModule(moduleFile.moduleFile, messageContext, requestParameters.moduleForceUpdate != null, requestParameters.moduleAutoStart != null, requestParameters.moduleValidateDefinitions == null)"/>
        </transition>
        <transition on="installModule" to="view">
            <evaluate expression="flowHandler.installModule(requestParameters.forgeId, requestParameters.moduleUrl, requestParameters.moduleAutoStart != null, requestParameters.moduleValidateDefinitions == null, messageContext)"/>
        </transition>
        <transition on="installModuleAndStart" to="view">
            <evaluate expression="flowHandler.installModule(requestParameters.forgeId, requestParameters.moduleUrl, true, messageContext)"/>
        </transition>
        <transition on="installModuleOnly" to="view">
            <evaluate expression="flowHandler.installModule(requestParameters.forgeId, requestParameters.moduleUrl, false, messageContext)"/>
        </transition>
        <transition on="reloadModules" to="view">
            <evaluate expression="flowHandler.reloadModules()"/>
        </transition>
        <transition on="viewDetails" to="detailedView"/>
        <transition on="viewAvailableModules" to="forgeView"/>
    </view-state>

    <view-state id="studioView">
        <on-render>
            <evaluate expression="flowHandler.allModuleVersions" result="requestScope.allModuleVersions"/>
            <evaluate expression="JahiaTemplateManagerService.templatePackageRegistry.registeredModules" result="requestScope.registeredModules"/>
            <evaluate expression="JahiaTemplateManagerService.sourceControlFactory.supportedSourceControls" result="requestScope.sourceControls"/>
            <evaluate expression="flowHandler.populateSitesInformation(flowRequestContext)" />
        </on-render>

        <transition on="viewDetails" to="detailedView"/>
    </view-state>

    <view-state id="viewDownloadForm" model="flowScope">
        <on-entry>
            <evaluate expression="requestParameters.scmUri?:flowScope.scmUri" result="flowScope.scmUri"/>
            <evaluate expression="requestParameters.module?:flowScope.module" result="flowScope.module"/>
            <evaluate expression="requestParameters.version?:flowScope.version" result="flowScope.version"/>
            <evaluate expression="flowScope.branchTagInfos ?: flowHandler.listBranchOrTags(flowScope.version, flowScope.scmUri)" result="flowScope.branchTagInfos"/>
            <evaluate expression="flowScope.branchTagInfos == null ? flowScope.branchOrTag : flowHandler.guessBranchOrTag(flowScope.version, flowScope.scmUri, flowScope.branchTagInfos, flowScope.branchOrTag)" result="flowScope.branchOrTag"/>
        </on-entry>
        <transition on="downloadSources" to="downloadSources"/>
        <transition on="cancel" to="end"/>
    </view-state>

    <view-state id="detailedView">
        <on-entry>
            <evaluate expression="requestParameters.selectedModule?:flowScope.selectedModule" result="flowScope.selectedModule"/>
        </on-entry>
        <on-render>
            <evaluate expression="flowHandler.loadModuleInformation(flowRequestContext)" result="requestScope.detailedModule"/>
            <evaluate expression="JahiaTemplateManagerService.sourceControlFactory.supportedSourceControls"
                      result="requestScope.sourceControls"/>
        </on-render>
        <transition on="startModule" to="startModule"/>
        <transition on="stopModule" to="stopModule"/>
        <transition on="downloadSources" to="downloadSources">
            <evaluate expression="flowHandler.validateScmInfo(requestParameters.scmUri, requestParameters.branchOrTag, requestParameters.version, flowScope)"/>
        </transition>
        <transition on="viewDownloadForm" to="viewDownloadForm"/>
        <transition on="duplicateModuleForm" to="duplicateModuleForm"/>
        <transition on="downloadTempSources" to="downloadTempSources"/>
        <transition on="viewDetails" to="detailedView"/>
        <transition on="enable" to="enableOnSite"/>
        <transition on="disable" to="disableFromSite"/>
        <transition on="disableAll" to="disableFromAllSites"/>
        <transition on="viewInstalledModules" to="viewResolver"/>
        <transition on="undeployModule" to="undeployModule"/>
        <transition on="updateModule" to="updateModule"/>
        <transition on="refreshModule" to="refreshModule"/>
    </view-state>

    <action-state id="downloadSources">
        <on-entry>
            <evaluate expression="requestParameters.scmUri?:flowScope.scmUri" result="flowScope.scmUri"/>
            <evaluate expression="requestParameters.module?:flowScope.module" result="flowScope.module"/>
            <evaluate expression="requestParameters.version?:flowScope.version" result="flowScope.version"/>
            <evaluate expression="requestParameters.branchOrTag?:flowScope.branchOrTag" result="flowScope.branchOrTag"/>
        </on-entry>
        <evaluate expression="flowHandler.checkoutModule(flowScope, jcrSessionFactory.currentUserSession)"/>
        <transition on-exception="java.lang.Exception" to="viewDownloadForm">
            <evaluate expression="flowHandler.handleError(rootCauseException, flowScope, messageContext)"/>
            <evaluate expression="flowHandler.logError(rootCauseException)"/>
        </transition>
        <transition to="end">
            <evaluate expression="flowHandler.storeTablesUUID(flowRequestContext)"/>
        </transition>
    </action-state>

    <action-state id="downloadTempSources">
        <on-entry>
            <evaluate expression="requestParameters.scmUri?:flowScope.scmUri" result="flowScope.scmUri"/>
            <evaluate expression="requestParameters.module?:flowScope.module" result="flowScope.module"/>
            <evaluate expression="requestParameters.version?:flowScope.version" result="flowScope.version"/>
            <evaluate expression="requestParameters.branchOrTag?:flowScope.branchOrTag" result="flowScope.branchOrTag"/>
            <evaluate expression="flowHandler.validateScmInfo(flowScope.scmUri, flowScope.branchOrTag, flowScope.version, flowScope)"/>
        </on-entry>
        <evaluate expression="flowHandler.checkoutTempModule(flowScope)" result="flowScope.tempSources"/>
        <transition on-exception="java.lang.Exception" to="duplicateModuleForm">
            <evaluate expression="flowHandler.handleError(rootCauseException, flowScope, messageContext)"/>
            <evaluate expression="flowHandler.logError(rootCauseException)"/>
        </transition>
        <transition to="duplicateModuleForm"/>
    </action-state>

    <view-state id="duplicateModuleForm">
        <on-entry>
            <evaluate expression="requestParameters.moduleName?:flowScope.moduleName" result="flowScope.moduleName"/>
            <evaluate expression="requestParameters.moduleId?:flowScope.moduleId" result="flowScope.moduleId"/>
            <evaluate expression="requestParameters.groupId?:flowScope.groupId" result="flowScope.groupId"/>
            <evaluate expression="requestParameters.srcPath?:flowScope.srcPath" result="flowScope.srcPath"/>
            <evaluate expression="flowScope.tempSources != null ? flowScope.tempSources.path : flowScope.srcPath " result="flowScope.srcPath"/>
            <evaluate expression="requestParameters.scmUri?:flowScope.scmUri" result="flowScope.scmUri"/>
            <evaluate expression="requestParameters.newScmUri?:flowScope.newScmUri" result="flowScope.newScmUri"/>
            <evaluate expression="requestParameters.branchOrTag?:flowScope.branchOrTag" result="flowScope.branchOrTag"/>
            <evaluate expression="requestParameters.version?:flowScope.version" result="flowScope.version"/>
            <evaluate expression="settingsBean.getModulesSourcesDiskPath()" result="flowScope.dstPath"/>
            <evaluate expression="flowHandler.getModuleNodetypes(flowScope.moduleId)" result="flowScope.moduleNodetypes"/>
            <evaluate expression="flowScope.branchTagInfos ?: (flowScope.srcPath != null || flowScope.newScmUri != null ? null : flowHandler.listBranchOrTags(flowScope.version, flowScope.scmUri))" result="flowScope.branchTagInfos"/>
            <evaluate expression="flowScope.branchTagInfos == null ? flowScope.branchOrTag : flowHandler.guessBranchOrTag(flowScope.version, flowScope.scmUri, flowScope.branchTagInfos, flowScope.branchOrTag)" result="flowScope.branchOrTag"/>
            <evaluate expression="messageContext.hasErrorMessages()" result="flowScope.hasError"/>
        </on-entry>
        <transition on="cancelDuplicate" to="duplicateCanceled"/>
    </view-state>

    <end-state id="duplicateCanceled">
        <on-entry>
            <evaluate expression="flowHandler.deleteTempSources(flowScope.tempSources)" />
        </on-entry>
    </end-state>

    <action-state id="startModule">
        <evaluate
                expression="flowHandler.startModule(requestParameters.module,requestParameters.version,flowRequestContext)"/>
        <transition to="end"/>
        <transition on-exception="java.lang.Exception" to="view">
            <evaluate expression="flowHandler.handleError(rootCauseException, flowScope, messageContext)"/>
            <evaluate expression="flowHandler.logError(rootCauseException)"/>
        </transition>
    </action-state>

    <action-state id="stopModule">
        <evaluate expression="flowHandler.stopModule(requestParameters.module,flowRequestContext)"/>
        <transition to="end"/>
        <transition on-exception="java.lang.Exception" to="view">
            <evaluate expression="flowHandler.handleError(rootCauseException, flowScope, messageContext)"/>
            <evaluate expression="flowHandler.logError(rootCauseException)"/>
        </transition>
    </action-state>

    <action-state id="undeployModule">
        <evaluate expression="flowHandler.uninstallModule(requestParameters.module,requestParameters.version,flowRequestContext)"/>
        <transition to="view"/>
        <transition on-exception="java.lang.Exception" to="view">
            <evaluate expression="flowHandler.handleError(rootCauseException, flowScope, messageContext)"/>
            <evaluate expression="flowHandler.logError(rootCauseException)"/>
        </transition>
    </action-state>

    <action-state id="updateModule">
        <evaluate expression="flowHandler.updateModule(requestParameters.module,requestParameters.version)"/>
        <transition to="view"/>
        <transition on-exception="java.lang.Exception" to="view">
            <evaluate expression="flowHandler.handleError(rootCauseException, flowScope, messageContext)"/>
            <evaluate expression="flowHandler.logError(rootCauseException)"/>
        </transition>
    </action-state>

    <action-state id="refreshModule">
        <evaluate expression="flowHandler.refreshModule(requestParameters.module,requestParameters.version)"/>
        <transition to="detailedView"/>
        <transition on-exception="java.lang.Exception" to="detailedView">
            <evaluate expression="flowHandler.handleError(rootCauseException, flowScope, messageContext)"/>
            <evaluate expression="flowHandler.logError(rootCauseException)"/>
        </transition>
    </action-state>

    <action-state id="enableOnSite">
        <evaluate
                expression="JahiaTemplateManagerService.installModule(requestParameters.module,requestParameters.version,requestParameters.enableOn,null)"/>
        <transition on-exception="java.lang.Exception" to="detailedView">
            <set name="flashScope.error" value="'serverSettings.manageModules.module.enable.error'"/>
            <evaluate expression="flowHandler.logError(rootCauseException)"/>
        </transition>
        <transition to="detailedView"/>
    </action-state>

    <action-state id="disableFromSite">
        <evaluate
                expression="JahiaTemplateManagerService.uninstallModule(requestParameters.module,requestParameters.disableFrom,null,requestParameters.purge)"/>
        <transition on-exception="java.lang.Exception" to="detailedView">
            <set name="flashScope.error" value="'serverSettings.manageModules.module.disable.error'"/>
            <evaluate expression="flowHandler.logError(rootCauseException)"/>
        </transition>
        <transition to="detailedView"/>
    </action-state>

    <action-state id="disableFromAllSites">
        <evaluate
                expression="JahiaTemplateManagerService.uninstallModulesFromAllSites(requestParameters.module,null,requestParameters.purge)"/>
        <transition on-exception="java.lang.Exception" to="detailedView">
            <set name="flashScope.error" value="'serverSettings.manageModules.module.undeploy.error'"/>
            <evaluate expression="flowHandler.logError(rootCauseException)"/>
        </transition>
        <transition to="detailedView"/>
    </action-state>

    <view-state id="forgeView" model="module">
        <on-render>
            <evaluate expression="flowHandler.forgeModules" result="requestScope.modules"/>
            <evaluate expression="flowHandler.allModuleVersions" result="requestScope.allModuleVersions"/>
            <evaluate expression="flowHandler.getLastModulesUpdateTime()" result="requestScope.lastModulesUpdate"/>
        </on-render>

        <transition on="installForgeModule" to="forgeView">
            <!-- In this case the moduleAutoStart is a hidden input field and not a checkbox, so we additionally check if it is true or false -->
            <evaluate expression="flowHandler.installModule(requestParameters.forgeId, requestParameters.moduleUrl, requestParameters.moduleAutoStart != null &amp;&amp; requestParameters.moduleAutoStart == 'true', messageContext)"/>
        </transition>

        <transition on="reloadModules" to="forgeView">
            <evaluate expression="flowHandler.reloadModules()"/>
        </transition>

        <transition on="viewInstalledModules" to="view"/>
    </view-state>

    <end-state id="end"/>
</flow>
